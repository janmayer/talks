Use Business Language: Write Gherkin steps in the language that the business understands. Avoid technical jargon. The goal of BDD and Gherkin is to bridge the gap between the technical and non-technical stakeholders, so it's essential to keep the language accessible.

Start with the User's Goal: Every feature should start with a clear statement of the user's goal - what they're trying to achieve with this feature. This sets the context and makes the feature's purpose clear.

Keep Scenarios Independent: Each scenario should be independent and not rely on the state from other scenarios. This helps in ensuring that scenarios can be run individually without any dependencies.

Use Scenario Outline for Multiple Cases: If you have a scenario that needs to be run multiple times with different data, use a Scenario Outline. This allows you to define a template for the scenario and then provide a table of values to be used for each run.

Avoid too Many Steps: Keep the number of steps in each scenario to a minimum. Too many steps can make the scenario difficult to understand and maintain. As a rule of thumb, try to stick to Given-When-Then format without too many "And" steps.

Describe the Behavior, not the Implementation: The steps should describe what the system does, not how it does it. Avoid referring to specific clicks or UI elements in the steps. Instead, focus on the result of the action.

Use Background Wisely: The Background keyword allows you to specify steps that are common to every scenario in the feature. This can be useful for setup steps that are needed for each scenario. However, don't overuse this - if a step isn't necessary for the understanding of each scenario, it may be better to include it only in the scenarios that need it.

Refactor and Reuse Steps: Avoid duplication in your steps. If two steps are performing the same action but are worded differently, consider refactoring them into one step that can be used in both places.
-->





## Steps

```text
cardescriptor/
    features/
        steps/
            descriptor.py
            openai.py
            vehicle_service.py
        environment.py
        generate_vehicle_descriptions.feature
```

<!--
- Many Languages possible
- Independent from application language
-> just use python
-->

---

```python
# environment.py
def before_all(context):
    context.app = httpx.Client(base_url="http://localhost:8080")
```


<!--
- context.app -> Session to not repeat the base_url

-->


---

```python
# vehicle_service.py
@given("the Vehicle Service has information about a vehicle")
def setup_existing_vehicle(context)
    mock_existing_vehicle(context.vs, 200)
```
